const CQRSFixture = require("../../cqrs-fixture");

const aggregate = require("..");

const {
  commands: { create{{camelCaseName}}, upvote{{camelCaseName}} },
  events: { {{camelCaseName}}CreatedEvent, {{camelCaseName}}DeletedEvent },
} = aggregate;

jest
  .spyOn(global.Date, "now")
  .mockImplementation(() => new Date("2019-10-01T11:01:58.135Z").valueOf());

describe("Testing aggregate commands in isolation", () => {
  test("should commands with empty payload throw error", () => {
    expect(() => create{{camelCaseName}}({}, {})).toThrow("Aggregate validation error");
  });

  test("should create{{camelCaseName}} command return an {{camelCaseName}}CreatedEvent", () => {
    expect(
      create{{camelCaseName}}(
        {},
        {
          payload: {
            title: "Title",
            userId: "user-id-1",
          },
        }
      )
    ).toMatchSnapshot();
  });
});

describe("Testing {{aggregateId}} aggregate with cqrs fixture", () => {
  let fixture;

  beforeEach(() => {
    fixture = new CQRSFixture(aggregate);
  });

  test("should call raw command", () => {
    fixture
      .givenEvents([])
      .when({
        aggregateId: "aggregate-id-abcd-123",
        aggregateName: "{{aggregateName}}",
        type: "create{{camelCaseName}}",
        payload: {
          title: "Title ... title...",
          userId: "user-id-abcd-123",
        },
      })
      .expectEvents(
        {{camelCaseName}}CreatedEvent(
          "Title ... title...",
          "user-id-abcd-123",
          Date.now()
        )
      );
  });

  test("should create{{camelCaseName}} return an {{camelCaseName}}CreatedEvent event", () => {
    fixture
      .givenEvents()
      .when(create{{camelCaseName}}, {
        title: "Title ... title...",
        userId: "user-id-abcd-123",
      })
      .expectEvents(
        {{camelCaseName}}CreatedEvent(
          "Title ... title...",
          "user-id-abcd-123",
          Date.now()
        )
      );
  });

  test("should reject upvode command when {{aggregateName}} already deleted", () => {
    fixture
      .givenEvents([
        {{camelCaseName}}CreatedEvent(
          "Title ... title...",
          "user-id-abcd-123",
          Date.now()
        ),
        {{camelCaseName}}DeletedEvent(Date.now()),
      ])
      .whenThrow(upvote{{camelCaseName}}, { userId: "user-1234" })
      .toThrow("Aggregate is already deleted");
  });
});
